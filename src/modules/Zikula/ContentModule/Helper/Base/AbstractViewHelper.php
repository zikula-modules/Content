<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\Helper\Base;

use Symfony\Bundle\TwigBundle\Loader\FilesystemLoader;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpFoundation\Response;
use Twig\Environment;
use Zikula\Core\Response\PlainResponse;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\ThemeModule\Engine\AssetFilter;
use Zikula\ThemeModule\Engine\ParameterBag;
use Zikula\ContentModule\Helper\ControllerHelper;
use Zikula\ContentModule\Helper\PermissionHelper;

/**
 * Helper base class for view layer methods.
 */
abstract class AbstractViewHelper
{
    /**
     * @var Environment
     */
    protected $twig;
    
    /**
     * @var FilesystemLoader
     */
    protected $twigLoader;
    
    /**
     * @var RequestStack
     */
    protected $requestStack;
    
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @var AssetFilter
     */
    protected $assetFilter;
    
    /**
     * @var ParameterBag
     */
    protected $pageVars;
    
    /**
     * @var ControllerHelper
     */
    protected $controllerHelper;
    
    /**
     * @var PermissionHelper
     */
    protected $permissionHelper;
    
    /**
     * ViewHelper constructor.
     *
     * @param Environment $twig
     * @param FilesystemLoader $twigLoader
     * @param RequestStack $requestStack
     * @param VariableApiInterface $variableApi
     * @param AssetFilter $assetFilter
     * @param ParameterBag $pageVars
     * @param ControllerHelper $controllerHelper
     * @param PermissionHelper $permissionHelper
     *
     * @return void
     */
    public function __construct(
        Environment $twig,
        FilesystemLoader $twigLoader,
        RequestStack $requestStack,
        VariableApiInterface $variableApi,
        AssetFilter $assetFilter,
        ParameterBag $pageVars,
        ControllerHelper $controllerHelper,
        PermissionHelper $permissionHelper
    ) {
        $this->twig = $twig;
        $this->twigLoader = $twigLoader;
        $this->requestStack = $requestStack;
        $this->variableApi = $variableApi;
        $this->assetFilter = $assetFilter;
        $this->pageVars = $pageVars;
        $this->controllerHelper = $controllerHelper;
        $this->permissionHelper = $permissionHelper;
    }
    
    /**
     * Determines the view template for a certain method with given parameters.
     *
     * @param string $type Current controller (name of currently treated entity)
     * @param string $func Current function (index, view, ...)
     *
     * @return string name of template file
     */
    public function getViewTemplate($type, $func)
    {
        // create the base template name
        $template = '@ZikulaContentModule/' . ucfirst($type) . '/' . $func;
    
        // check for template extension
        $templateExtension = '.' . $this->determineExtension($type, $func);
    
        // check whether a special template is used
        $tpl = $this->requestStack->getCurrentRequest()->query->getAlnum('tpl', '');
        if (!empty($tpl)) {
            // check if custom template exists
            $customTemplate = $template . ucfirst($tpl);
            if ($this->twigLoader->exists($customTemplate . $templateExtension)) {
                $template = $customTemplate;
            }
        }
    
        $template .= $templateExtension;
    
        return $template;
    }
    
    /**
     * Helper method for managing view templates.
     *
     * @param string $type               Current controller (name of currently treated entity)
     * @param string $func               Current function (index, view, ...)
     * @param array  $templateParameters Template data
     * @param string $template           Optional assignment of precalculated template file
     *
     * @return mixed Output
     */
    public function processTemplate($type, $func, array $templateParameters = [], $template = '')
    {
        $templateExtension = $this->determineExtension($type, $func);
        if (empty($template)) {
            $template = $this->getViewTemplate($type, $func);
        }
    
        if ($templateExtension == 'pdf.twig') {
            $template = str_replace('.pdf', '.html', $template);
    
            return $this->processPdf($templateParameters, $template);
        }
    
        // look whether we need output with or without the theme
        $raw = $this->requestStack->getCurrentRequest()->query->getBoolean('raw', false);
        if (!$raw && $templateExtension != 'html.twig') {
            $raw = true;
        }
    
        $output = $this->twig->render($template, $templateParameters);
        $response = null;
        if (true === $raw) {
            // standalone output
            if ($templateExtension == 'csv.twig') {
                // convert to UTF-16 for improved excel compatibility
                // see http://stackoverflow.com/questions/4348802/how-can-i-output-a-utf-8-csv-in-php-that-excel-will-read-properly
                $output = chr(255) . chr(254) . mb_convert_encoding($output, 'UTF-16LE', 'UTF-8');
            }
            $output = $this->injectAssetsIntoRawOutput($output);
    
            $response = new PlainResponse($output);
        } else {
            // normal output
            $response = new Response($output);
        }
    
        // check if we need to set any custom headers
        switch ($templateExtension) {
            case 'csv.twig':
                $response->headers->set('Content-Encoding', 'UTF-8');
                $response->headers->set('Content-Type', 'text/csv; charset=UTF-8');
                $response->headers->set('Content-Disposition', 'attachment; filename=' . $type . '-list.csv');
                break;
            case 'json.twig':
                $response->headers->set('Content-Type', 'application/json');
                break;
            case 'xml.twig':
                $response->headers->set('Content-Type', 'text/xml');
                break;
        }
    
        return $response;
    }
    
    /**
     * Adds assets to a raw page which is not processed by the Theme engine.
     *
     * @param string $output The output to be enhanced
     *
     * @return string Output including additional assets
     */
    protected function injectAssetsIntoRawOutput($output = '')
    {
        return $this->assetFilter->filter($output);
    }
    
    /**
     * Get extension of the currently treated template.
     *
     * @param string $type Current controller (name of currently treated entity)
     * @param string $func Current function (index, view, ...)
     *
     * @return string Template extension
     */
    protected function determineExtension($type, $func)
    {
        $templateExtension = 'html.twig';
        if (!in_array($func, ['view', 'display'])) {
            return $templateExtension;
        }
    
        $extensions = $this->availableExtensions($type, $func);
        $format = $this->requestStack->getCurrentRequest()->getRequestFormat();
        if ($format != 'html' && in_array($format, $extensions)) {
            $templateExtension = $format . '.twig';
        }
    
        return $templateExtension;
    }
    
    /**
     * Get list of available template extensions.
     *
     * @param string $type Current controller (name of currently treated entity)
     * @param string $func Current function (index, view, ...)
     *
     * @return string[] List of allowed template extensions
     */
    protected function availableExtensions($type, $func)
    {
        $extensions = [];
        $hasAdminAccess = $this->permissionHelper->hasComponentPermission($type, ACCESS_ADMIN);
        if ($func == 'view') {
            if ($hasAdminAccess) {
                $extensions = ['csv', 'xml', 'json', 'pdf'];
            } else {
                $extensions = ['pdf'];
            }
        } elseif ($func == 'display') {
            if ($hasAdminAccess) {
                $extensions = ['xml', 'json', 'pdf'];
            } else {
                $extensions = ['pdf'];
            }
        }
    
        return $extensions;
    }
    
    /**
     * Processes a template file using dompdf (LGPL).
     *
     * @param array  $templateParameters Template data
     * @param string $template           Name of template to use
     *
     * @return mixed Output
     */
    protected function processPdf(array $templateParameters = [], $template = '')
    {
        // first the content, to set page vars
        $output = $this->twig->render($template, $templateParameters);
    
        // make local images absolute
        $request = $this->requestStack->getCurrentRequest();
        $output = str_replace('img src="' . $request->getSchemeAndHttpHost() . $request->getBasePath() . '/', 'img src="/', $output);
        $output = str_replace('img src="/', 'img src="' . $request->server->get('DOCUMENT_ROOT') . '/', $output);
    
        // then the surrounding
        $output = $this->twig->render('@ZikulaContentModule/includePdfHeader.html.twig') . $output . '</body></html>';
    
        // create name of the pdf output file
        $siteName = $this->variableApi->getSystemVar('sitename');
        $pageTitle = iconv('UTF-8', 'ASCII//TRANSLIT', $this->pageVars->get('title', ''));
        $fileTitle = iconv('UTF-8', 'ASCII//TRANSLIT', $siteName)
                   . '-'
                   . ($pageTitle != '' ? $pageTitle . '-' : '')
                   . date('Ymd') . '.pdf';
       $fileTitle = str_replace(' ', '_', $fileTitle);
    
        /*
        if (true === $request->query->getBoolean('dbg', false)) {
            die($output);
        }
        */
    
        // instantiate pdf object
        $pdf = new \Dompdf\Dompdf();
        // define page properties
        $pdf->setPaper('A4', 'portrait');
        // load html input data
        $pdf->loadHtml($output);
        // create the actual pdf file
        $pdf->render();
        // stream output to browser
        $pdf->stream($fileTitle);
    
        return new Response();
    }
}
