<?php
/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @link https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

namespace Zikula\ContentModule\Block\Base;

use Symfony\Component\HttpKernel\Controller\ControllerReference;
use Zikula\BlocksModule\AbstractBlockHandler;
use Zikula\ContentModule\Block\Form\Type\ItemBlockType;

/**
 * Generic item detail block base class.
 */
abstract class AbstractItemBlock extends AbstractBlockHandler
{
    /**
     * @inheritDoc
     */
    public function getType()
    {
        return $this->__('Content detail', 'zikulacontentmodule');
    }
    
    /**
     * @inheritDoc
     */
    public function display(array $properties = [])
    {
        // only show block content if the user has the required permissions
        if (!$this->hasPermission('ZikulaContentModule:ItemBlock:', "$properties[title]::", ACCESS_OVERVIEW)) {
            return '';
        }
    
        // set default values for all params which are not properly set
        $defaults = $this->getDefaults();
        $properties = array_merge($defaults, $properties);
    
        if (null === $properties['id'] || empty($properties['id'])) {
            return '';
        }
    
        $controllerHelper = $this->get('zikula_content_module.controller_helper');
        $contextArgs = ['name' => 'detail'];
        if (!isset($properties['objectType']) || !in_array($properties['objectType'], $controllerHelper->getObjectTypes('block', $contextArgs))) {
            $properties['objectType'] = $controllerHelper->getDefaultObjectType('block', $contextArgs);
        }
    
        $controllerReference = new ControllerReference('ZikulaContentModule:External:display', $this->getDisplayArguments($properties), ['template' => $properties['customTemplate']]);
    
        return $this->get('fragment.handler')->render($controllerReference, 'inline', []);
    }
    
    /**
     * Returns common arguments for displaying the selected object using the external controller.
     *
     * @param array $properties The block properties
     *
     * @return array Display arguments
     */
    protected function getDisplayArguments(array $properties = [])
    {
        return [
            'objectType' => $properties['objectType'],
            'id' => $properties['id'],
            'source' => 'block',
            'displayMode' => 'embed'
        ];
    }
    
    /**
     * @inheritDoc
     */
    public function getFormClassName()
    {
        return ItemBlockType::class;
    }
    
    /**
     * @inheritDoc
     */
    public function getFormOptions()
    {
        $objectType = 'page';
    
        $request = $this->get('request_stack')->getCurrentRequest();
        if ($request->attributes->has('blockEntity')) {
            $blockEntity = $request->attributes->get('blockEntity');
            if (is_object($blockEntity) && method_exists($blockEntity, 'getProperties')) {
                $blockProperties = $blockEntity->getProperties();
                if (isset($blockProperties['objectType'])) {
                    $objectType = $blockProperties['objectType'];
                } else {
                    // set default options for new block creation
                    $blockEntity->setProperties($this->getDefaults());
                }
            }
        }
    
        return [
            'object_type' => $objectType
        ];
    }
    
    /**
     * @inheritDoc
     */
    public function getFormTemplate()
    {
        return '@ZikulaContentModule/Block/item_modify.html.twig';
    }
    
    /**
     * Returns default settings for this block.
     *
     * @return array The default settings
     */
    protected function getDefaults()
    {
        return [
            'objectType' => 'page',
            'id' => null,
            'template' => 'item_display.html.twig',
            'customTemplate' => null
        ];
    }
}
