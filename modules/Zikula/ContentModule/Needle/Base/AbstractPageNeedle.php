<?php

/**
 * Content.
 *
 * @copyright Axel Guckelsberger (Zikula)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@ziku.la>.
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Zikula\ContentModule\Needle\Base;

use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Routing\RouterInterface;
use Symfony\Contracts\Translation\TranslatorInterface;
use Zikula\ExtensionsModule\ModuleInterface\MultiHook\NeedleInterface;
use Zikula\ContentModule\Entity\Factory\EntityFactory;
use Zikula\ContentModule\Helper\EntityDisplayHelper;
use Zikula\ContentModule\Helper\PermissionHelper;

/**
 * PageNeedle base class.
 */
abstract class AbstractPageNeedle implements NeedleInterface
{
    /**
     * @var TranslatorInterface
     */
    protected $translator;
    
    /**
     * @var RouterInterface
     */
    protected $router;
    
    /**
     * @var PermissionHelper
     */
    protected $permissionHelper;
    
    /**
     * @var EntityFactory
     */
    protected $entityFactory;
    
    /**
     * @var EntityDisplayHelper
     */
    protected $entityDisplayHelper;
    
    /**
     * Bundle name
     *
     * @var string
     */
    protected $bundleName;
    
    /**
     * The name of this needle
     *
     * @var string
     */
    protected $name;
    
    public function __construct(
        TranslatorInterface $translator,
        RouterInterface $router,
        PermissionHelper $permissionHelper,
        EntityFactory $entityFactory,
        EntityDisplayHelper $entityDisplayHelper
    ) {
        $this->translator = $translator;
        $this->router = $router;
        $this->permissionHelper = $permissionHelper;
        $this->entityFactory = $entityFactory;
        $this->entityDisplayHelper = $entityDisplayHelper;
    
        $nsParts = explode('\\', get_class($this));
        $vendor = $nsParts[0];
        $nameAndType = $nsParts[1];
    
        $this->bundleName = $vendor . $nameAndType;
        $this->name = str_replace('Needle', '', array_pop($nsParts));
    }
    
    public function getName(): string
    {
        return $this->name;
    }
    
    public function getIcon(): string
    {
        return 'circle-o';
    }
    
    public function getTitle(): string
    {
        return $this->translator->trans('Pages', [], 'page');
    }
    
    public function getDescription(): string
    {
        return $this->translator->trans('Links to the list of pages and specific pages.', [], 'page');
    }
    
    public function getUsageInfo(): string
    {
        return 'CONTENT{PAGES|PAGE-pageId}';
    }
    
    public function isActive(): bool
    {
        return true;
    }
    
    public function isCaseSensitive(): bool
    {
        return true;
    }
    
    public function getSubjects(): array
    {
        return ['CONTENTPAGES', 'CONTENTPAGE-'];
    }
    
    /**
     * Applies the needle functionality.
     */
    public function apply(string $needleId, string $needleText): string
    {
        // cache the results
        static $cache;
        if (!isset($cache)) {
            $cache = [];
        }
    
        if (isset($cache[$needleId])) {
            // needle is already in cache array
            return $cache[$needleId];
        }
    
        // strip application prefix from needle
        $needleText = str_replace('CONTENT', '', $needleText);
    
        if ('PAGES' === $needleText) {
            if (!$this->permissionHelper->hasComponentPermission('page', ACCESS_READ)) {
                $cache[$needleId] = '';
            } else {
                $route = $this->router->generate(
                    'zikulacontentmodule_page_view',
                    [],
                    UrlGeneratorInterface::ABSOLUTE_URL
                );
                $linkTitle = $this->translator->trans('View pages', [], 'page');
                $linkText = $this->translator->trans('Pages', [], 'page');
                $cache[$needleId] = '<a href="' . $route . '" title="' . $linkTitle . '">' . $linkText . '</a>';
            }
    
            return $cache[$needleId];
        }
    
        $entityId = (int)$needleId;
        if (!$entityId) {
            $cache[$needleId] = '';
    
            return $cache[$needleId];
        }
    
        $repository = $this->entityFactory->getRepository('page');
        $entity = $repository->selectById($entityId, false);
        if (null === $entity) {
            $notFoundMessage = $this->translator->trans(
                'Page with id %id% could not be found',
                ['%id%' => $entityId],
                'page'
            );
            $cache[$needleId] = '<em>' . $notFoundMessage . '</em>';
    
            return $cache[$needleId];
        }
    
        if (!$this->permissionHelper->mayRead($entity)) {
            $cache[$needleId] = '';
    
            return $cache[$needleId];
        }
    
        $title = $this->entityDisplayHelper->getFormattedTitle($entity);
        $route = $this->router->generate(
            'zikulacontentmodule_page_display',
            $entity->createUrlArgs(),
            UrlGeneratorInterface::ABSOLUTE_URL
        );
        $cache[$needleId] = '<a href="' . $route . '" title="' . str_replace('"', '', $title) . '">' . $title . '</a>';
    
        return $cache[$needleId];
    }
    
    public function getBundleName(): string
    {
        return $this->bundleName;
    }
}
